
@*/*
         * Pete Fittante
         * WeCanCodeITBootCamp Wardrobe Project
         * 7/30/2017
         * A technology application that will deliver a web site to be used by me
           so I can make I do not have to think about coordinating clothes.
           The application uses ten models which utilize a one to many relationship

        Main Models
        Accessories, Bottoms, Shoes, and Tops the main index models for creating editing deleting and observing
        the details of a record. The main models have a one to may relationship with the Type and Outfit Models.

        Type Models
        AccessTyps, BottomType, ShoeType, and TopType models provide a list of options for the user to choose from
        when creating a record. The values stored are replace the type property in the main models.
        The Type models have a one to may relationship with the Main models.

        Outfit Model
        The Outfit model allow me to select items from the Main model and save those items in a outfit.
        The Outfit model has a one to many relationship with the Main models.

        As required the application was constructed Database first, with the tables and relationships imported
        into Visual studio after database completion.

        Views
        Along with the default views generated upon application creation, I have included eight custom views.
        All eight custom views are partial views that deliver the items of a group to the application. Although
        using partial views was not in my original plan, I was unable to properly utilize if statements in
        the partial views to sort items. The following code is located in each partial view, and does the
        heavy lifting in the application:

        <head>
        <script>
            function OnClick1() {

                  window.location.href = "@Url.Action("Details", "Tops", new { id = 19 })";
            };
        </script>
        <script>
            function OnClick2() {

                window.location.href = "@Url.Action("Details", "Tops", new { id = 21 })";
            };
        </script>
        <script>
            function OnClick3() {

                window.location.href = "@Url.Action("Details", "Accessories", new { id = 6 })";
            };
        </script>
        <script>
            function OnClick4() {

                window.location.href = "@Url.Action("Details", "Shoes", new { id = 3 })";
            };
        </script>
        <script>
            function OnClick5() {

                window.location.href = "@Url.Action("Details", "Shoes", new { id = 4 })";
            };
        </script>
        <script>
            function OnClick6() {

                window.location.href = "@Url.Action("Details", "Bottoms", new { id = 8 })";
            };
        </script>
        <script>
            function OnClick7() {

                window.location.href = "@Url.Action("Details", "Bottoms", new { id = 7 })";
            };
        </script>

    </head>
    @foreach (var item in Model)
    {
        if (item.Shoe.ShoeTypeID.Equals(2))
        {
            <div class="row container" id="outfitpart">
                <div class="col-md-3" id="oufitcolumn">
                    <img src="@Html.DisplayFor(modelItem => item.Top.Photo)">
                    @if (item.TopsID.Equals(19))
                    {
                        <input type="button" value="View Item Details" onclick="OnClick1()">
                    }


                </div>
                <div class="col-md-3" id="oufitcolumn">
                    <img src="@Html.DisplayFor(modelItem => item.Accessory.Photo)">
                    @if (item.AccessorysID.Equals(6))
                    {
                        <input type="button" value="View Item Details" onclick="OnClick3()">
                    }
                </div>
                <div class="col-md-3" id="oufitcolumn">
                    <img src="@Html.DisplayFor(modelItem => item.Shoe.Photo)">
                    @if (item.ShoesID.Equals(3))
                    {
                        <input type="button" value="View Item Details" onclick="OnClick4()">
                    }
                    else
                    {
                        <input type="button" value="View Item Details" onclick="OnClick5()">

                    }
                </div>
                <div class="col-md-3" id="oufitcolumn">
                    <img src="@Html.DisplayFor(modelItem => item.Bottom.Photo)" width="190" height="232">
                    @if (item.BottomsID.Equals(8))
                    {
                        <input type="button" value="View Item Details" onclick="OnClick6()">
                    }

                </div>
            </div>
            }
    }

    The partial views utilize scripts, foreachloops and if statements to sort and present views of
    individual or groups of items.  For example, in the case of stafford t-shirts, the code will generate
    a list of all outfits that have both types of Stafford t-shirts, while in the case of Corona Flip Flop
    only outfits that include Corona Flip flops will be generatated. Each partial view allows me to view
    the details of each individual item in the outfit group, and has a link(although not all are accurate)
    to buy the items online.

    Each Index page, with the excepion of the Outfits Index page, provide the access to create, edit, delete
    and see the details of each item in the database. Each item is presented with a picture and a detailed
    description in the Index and details views.

    The Details views as you may notice include a containers within containers.

    Things I could not accomplish:
        1. I wanted to have only one partial view with and conditional statement for each item.  I could
            not get the code right in razor to populate the containers. It would see the items in the first
            columns, but not recognize the remaining.
        2. I wanted to use one script to referance each picture, but I could not pass the Type id into
            the new{ id = } funtion.
        


*@